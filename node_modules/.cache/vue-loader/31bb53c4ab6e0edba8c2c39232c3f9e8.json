{"remainingRequest":"/home/josefj/WebstormProjects/ethereum-foundation/polynom/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/josefj/WebstormProjects/ethereum-foundation/polynom/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/josefj/WebstormProjects/ethereum-foundation/polynom/src/App.vue","mtime":1567961441840},{"path":"/home/josefj/WebstormProjects/ethereum-foundation/polynom/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/josefj/WebstormProjects/ethereum-foundation/polynom/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/josefj/WebstormProjects/ethereum-foundation/polynom/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/josefj/WebstormProjects/ethereum-foundation/polynom/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport paper from 'paper'\n\nexport default {\n  name: 'app',\n  methods: {\n    draw: () => {\n      var ctx = document.getElementById('bg-canvas')\n      paper.setup(ctx)\n\n      var xAxis = window.innerWidth\n      var yAxis = window.innerHeight\n\n      var paths = [null, null, null]\n      for (let p = 0; p < paths.length; p++) {\n        paths[p] = new paper.Path({\n          strokeColor: '#fff',\n          strokeWidth: 1\n        })\n      }\n      var wormLen = 23\n      var worms = [null, null, null]\n      for (let w = 0; w < worms.length; w++) {\n        worms[w] = new paper.Path({\n          strokeColor: '#47fc00',\n          // fillColor: '#ffffff',\n          strokeWidth: 5,\n          strokeCap: 'round',\n          opacity: 0.42\n        })\n        while (worms[w].segments.length < wormLen) {\n          worms[w].add(new paper.Point(0, 0))\n        }\n      }\n\n      // Define a function to generate a random polynomial of degree 3\n      function genNewCurve (path) {\n        path.removeSegments()\n        let xScale = xAxis / 20\n        let yScale = yAxis / 2\n\n        // let ar = (Math.random() < 0.5 ? -1 : 1)\n        let br = (Math.random() < 0.5 ? -1 : 1)\n        let cr = (Math.random() < 0.5 ? -1 : 1)\n        let dr = (Math.random() < 0.5 ? -1 : 1)\n\n        // let a = Math.floor(Math.random() * 2) * ar\n        let b = Math.floor(Math.random() * 5) * br\n        let c = Math.floor(Math.random() * 10) * cr\n        let d = Math.floor(Math.random() * 10) * dr\n\n        function polynomial (x) {\n          return b * (x ** 3) + c * (x ** 2) + d * (x ** 1)\n        }\n\n        for (var i = -10; i <= 10; i++) {\n          var segment = xScale\n          var init = false\n\n          // console.log('x: ' + (i * segment) + ' y: ' + (polynomial(i) + yScale))\n          if (i === -10) {\n            path.moveTo(new paper.Point((i + 10) * segment, polynomial(i) + yScale))\n          }\n          if (!init && ((polynomial(i) > 0) || (polynomial(i) < yAxis))) {\n            segment = (xAxis / (20 - i))\n            init = true\n          }\n          path.add(new paper.Point((i + 10) * segment, polynomial(i) + yScale))\n        }\n        path.smooth()\n      }\n\n      // Define helper function getPointAtPercent to link Worm to Path\n      paper.Path.prototype.getPointAtPercent = function (percent) {\n        return this.getLocationAt(percent * this.length).getPoint()\n      }\n\n      // Setup animation params\n      let duration = 4000\n      let animationEndTime = [null, null, null]\n\n      // Trigger redraw\n      paper.view.onFrame = function onFrame (event) {\n        let now = Date.now()\n\n        for (let i = 0; i < paths.length; i++) {\n          if (now > animationEndTime[i]) {\n            animationEndTime[i] = now + duration + (Math.round((Math.random() * 3000)))\n            let hueChange = '+= ' + (Math.round((Math.random() * 500)))\n            worms[i].tween({\n              'strokeColor.hue': hueChange,\n              'strokeWidth': (Math.round((Math.random() * 5)) + 2)\n            }, duration)\n            genNewCurve(paths[i])\n          }\n          let percent = (duration - (animationEndTime[i] - now)) / duration\n\n          for (let s = 0; s < worms[i].segments.length; s++) {\n            let tailPosition = ((percent - (0.005 * s)) > 0) ? (percent - (0.005 * s)) : 0\n            worms[i].segments[s].point = paths[i].getPointAtPercent(tailPosition)\n            worms[i].smooth()\n          }\n        }\n        xAxis = window.innerWidth\n        yAxis = window.innerHeight\n      }\n      paper.view.draw()\n    }\n  },\n  mounted () {\n    this.draw()\n  }\n}\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <div id=\"bg\">\n      <canvas id=\"bg-canvas\" resize=\"true\"></canvas>\n    </div>\n    <router-view/>\n  </div>\n</template>\n\n<script>\nimport paper from 'paper'\n\nexport default {\n  name: 'app',\n  methods: {\n    draw: () => {\n      var ctx = document.getElementById('bg-canvas')\n      paper.setup(ctx)\n\n      var xAxis = window.innerWidth\n      var yAxis = window.innerHeight\n\n      var paths = [null, null, null]\n      for (let p = 0; p < paths.length; p++) {\n        paths[p] = new paper.Path({\n          strokeColor: '#fff',\n          strokeWidth: 1\n        })\n      }\n      var wormLen = 23\n      var worms = [null, null, null]\n      for (let w = 0; w < worms.length; w++) {\n        worms[w] = new paper.Path({\n          strokeColor: '#47fc00',\n          // fillColor: '#ffffff',\n          strokeWidth: 5,\n          strokeCap: 'round',\n          opacity: 0.42\n        })\n        while (worms[w].segments.length < wormLen) {\n          worms[w].add(new paper.Point(0, 0))\n        }\n      }\n\n      // Define a function to generate a random polynomial of degree 3\n      function genNewCurve (path) {\n        path.removeSegments()\n        let xScale = xAxis / 20\n        let yScale = yAxis / 2\n\n        // let ar = (Math.random() < 0.5 ? -1 : 1)\n        let br = (Math.random() < 0.5 ? -1 : 1)\n        let cr = (Math.random() < 0.5 ? -1 : 1)\n        let dr = (Math.random() < 0.5 ? -1 : 1)\n\n        // let a = Math.floor(Math.random() * 2) * ar\n        let b = Math.floor(Math.random() * 5) * br\n        let c = Math.floor(Math.random() * 10) * cr\n        let d = Math.floor(Math.random() * 10) * dr\n\n        function polynomial (x) {\n          return b * (x ** 3) + c * (x ** 2) + d * (x ** 1)\n        }\n\n        for (var i = -10; i <= 10; i++) {\n          var segment = xScale\n          var init = false\n\n          // console.log('x: ' + (i * segment) + ' y: ' + (polynomial(i) + yScale))\n          if (i === -10) {\n            path.moveTo(new paper.Point((i + 10) * segment, polynomial(i) + yScale))\n          }\n          if (!init && ((polynomial(i) > 0) || (polynomial(i) < yAxis))) {\n            segment = (xAxis / (20 - i))\n            init = true\n          }\n          path.add(new paper.Point((i + 10) * segment, polynomial(i) + yScale))\n        }\n        path.smooth()\n      }\n\n      // Define helper function getPointAtPercent to link Worm to Path\n      paper.Path.prototype.getPointAtPercent = function (percent) {\n        return this.getLocationAt(percent * this.length).getPoint()\n      }\n\n      // Setup animation params\n      let duration = 4000\n      let animationEndTime = [null, null, null]\n\n      // Trigger redraw\n      paper.view.onFrame = function onFrame (event) {\n        let now = Date.now()\n\n        for (let i = 0; i < paths.length; i++) {\n          if (now > animationEndTime[i]) {\n            animationEndTime[i] = now + duration + (Math.round((Math.random() * 3000)))\n            let hueChange = '+= ' + (Math.round((Math.random() * 500)))\n            worms[i].tween({\n              'strokeColor.hue': hueChange,\n              'strokeWidth': (Math.round((Math.random() * 5)) + 2)\n            }, duration)\n            genNewCurve(paths[i])\n          }\n          let percent = (duration - (animationEndTime[i] - now)) / duration\n\n          for (let s = 0; s < worms[i].segments.length; s++) {\n            let tailPosition = ((percent - (0.005 * s)) > 0) ? (percent - (0.005 * s)) : 0\n            worms[i].segments[s].point = paths[i].getPointAtPercent(tailPosition)\n            worms[i].smooth()\n          }\n        }\n        xAxis = window.innerWidth\n        yAxis = window.innerHeight\n      }\n      paper.view.draw()\n    }\n  },\n  mounted () {\n    this.draw()\n  }\n}\n</script>\n\n<style lang=\"scss\">\n  @import 'styles/normalize.css';\n  @import \"styles/skeleton.css\";\n\n  html, body, h2 {\n    font-family: Rift;\n    letter-spacing: 3px;\n    color: #000000;\n  }\n\n  #bg {\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    /*background-color: #0FA0CE;*/\n    top: 0;\n    left: 0;\n  }\n\n  #bg-canvas {\n    width: 100%;\n    height: 99%;\n  }\n\n  .trans {\n    -webkit-animation: trans 2s ease-in-out;\n    -o-animation: trans 2s ease-in-out;\n    -ms-animation: trans 2s ease-in-out;\n    -moz-animation: trans 2s ease-in-out;\n    animation: trans 2s ease-in-out;\n    animation-fill-mode: forwards;\n  }\n\n  @font-face {\n    font-family: 'Rift';\n    src: url('assets/font/RiftSoft-Regular.otf');\n    font-weight: normal;\n    font-style: normal;\n  }\n\n  @font-face {\n    font-family: 'RiftBold';\n    src: url('assets/font/RiftSoft-Bold.otf');\n    font-weight: bold;\n    font-style: normal;\n  }\n\n  @-webkit-keyframes trans {\n    0% {\n      background: #FFFFFF;\n      color: rgba(0, 0, 0, 1);\n    }\n    100% {\n      background: #000000;\n      color: rgba(0, 0, 0, 0);\n    }\n  }\n\n  @keyframes trans {\n    0% {\n      background: #FFFFFF;\n      color: rgba(0, 0, 0, 1);\n    }\n    100% {\n      background: #000000;\n      color: rgba(0, 0, 0, 0);\n    }\n  }\n\n</style>\n"]}]}