{"remainingRequest":"/home/josefj/WebstormProjects/ethereum-foundation/polynom/node_modules/thread-loader/dist/cjs.js!/home/josefj/WebstormProjects/ethereum-foundation/polynom/node_modules/babel-loader/lib/index.js!/home/josefj/WebstormProjects/ethereum-foundation/polynom/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/josefj/WebstormProjects/ethereum-foundation/polynom/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/josefj/WebstormProjects/ethereum-foundation/polynom/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/josefj/WebstormProjects/ethereum-foundation/polynom/src/App.vue","mtime":1567961441840},{"path":"/home/josefj/WebstormProjects/ethereum-foundation/polynom/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/josefj/WebstormProjects/ethereum-foundation/polynom/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/josefj/WebstormProjects/ethereum-foundation/polynom/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/josefj/WebstormProjects/ethereum-foundation/polynom/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/josefj/WebstormProjects/ethereum-foundation/polynom/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\nimport paper from 'paper';\nexport default {\n  name: 'app',\n  methods: {\n    draw: function draw() {\n      var ctx = document.getElementById('bg-canvas');\n      paper.setup(ctx);\n      var xAxis = window.innerWidth;\n      var yAxis = window.innerHeight;\n      var paths = [null, null, null];\n\n      for (var p = 0; p < paths.length; p++) {\n        paths[p] = new paper.Path({\n          strokeColor: '#fff',\n          strokeWidth: 1\n        });\n      }\n\n      var wormLen = 23;\n      var worms = [null, null, null];\n\n      for (var w = 0; w < worms.length; w++) {\n        worms[w] = new paper.Path({\n          strokeColor: '#47fc00',\n          // fillColor: '#ffffff',\n          strokeWidth: 5,\n          strokeCap: 'round',\n          opacity: 0.42\n        });\n\n        while (worms[w].segments.length < wormLen) {\n          worms[w].add(new paper.Point(0, 0));\n        }\n      } // Define a function to generate a random polynomial of degree 3\n\n\n      function genNewCurve(path) {\n        path.removeSegments();\n        var xScale = xAxis / 20;\n        var yScale = yAxis / 2; // let ar = (Math.random() < 0.5 ? -1 : 1)\n\n        var br = Math.random() < 0.5 ? -1 : 1;\n        var cr = Math.random() < 0.5 ? -1 : 1;\n        var dr = Math.random() < 0.5 ? -1 : 1; // let a = Math.floor(Math.random() * 2) * ar\n\n        var b = Math.floor(Math.random() * 5) * br;\n        var c = Math.floor(Math.random() * 10) * cr;\n        var d = Math.floor(Math.random() * 10) * dr;\n\n        function polynomial(x) {\n          return b * Math.pow(x, 3) + c * Math.pow(x, 2) + d * Math.pow(x, 1);\n        }\n\n        for (var i = -10; i <= 10; i++) {\n          var segment = xScale;\n          var init = false; // console.log('x: ' + (i * segment) + ' y: ' + (polynomial(i) + yScale))\n\n          if (i === -10) {\n            path.moveTo(new paper.Point((i + 10) * segment, polynomial(i) + yScale));\n          }\n\n          if (!init && (polynomial(i) > 0 || polynomial(i) < yAxis)) {\n            segment = xAxis / (20 - i);\n            init = true;\n          }\n\n          path.add(new paper.Point((i + 10) * segment, polynomial(i) + yScale));\n        }\n\n        path.smooth();\n      } // Define helper function getPointAtPercent to link Worm to Path\n\n\n      paper.Path.prototype.getPointAtPercent = function (percent) {\n        return this.getLocationAt(percent * this.length).getPoint();\n      }; // Setup animation params\n\n\n      var duration = 4000;\n      var animationEndTime = [null, null, null]; // Trigger redraw\n\n      paper.view.onFrame = function onFrame(event) {\n        var now = Date.now();\n\n        for (var i = 0; i < paths.length; i++) {\n          if (now > animationEndTime[i]) {\n            animationEndTime[i] = now + duration + Math.round(Math.random() * 3000);\n            var hueChange = '+= ' + Math.round(Math.random() * 500);\n            worms[i].tween({\n              'strokeColor.hue': hueChange,\n              'strokeWidth': Math.round(Math.random() * 5) + 2\n            }, duration);\n            genNewCurve(paths[i]);\n          }\n\n          var percent = (duration - (animationEndTime[i] - now)) / duration;\n\n          for (var s = 0; s < worms[i].segments.length; s++) {\n            var tailPosition = percent - 0.005 * s > 0 ? percent - 0.005 * s : 0;\n            worms[i].segments[s].point = paths[i].getPointAtPercent(tailPosition);\n            worms[i].smooth();\n          }\n        }\n\n        xAxis = window.innerWidth;\n        yAxis = window.innerHeight;\n      };\n\n      paper.view.draw();\n    }\n  },\n  mounted: function mounted() {\n    this.draw();\n  }\n};",{"version":3,"sources":["App.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"app\">\n    <div id=\"bg\">\n      <canvas id=\"bg-canvas\" resize=\"true\"></canvas>\n    </div>\n    <router-view/>\n  </div>\n</template>\n\n<script>\nimport paper from 'paper'\n\nexport default {\n  name: 'app',\n  methods: {\n    draw: () => {\n      var ctx = document.getElementById('bg-canvas')\n      paper.setup(ctx)\n\n      var xAxis = window.innerWidth\n      var yAxis = window.innerHeight\n\n      var paths = [null, null, null]\n      for (let p = 0; p < paths.length; p++) {\n        paths[p] = new paper.Path({\n          strokeColor: '#fff',\n          strokeWidth: 1\n        })\n      }\n      var wormLen = 23\n      var worms = [null, null, null]\n      for (let w = 0; w < worms.length; w++) {\n        worms[w] = new paper.Path({\n          strokeColor: '#47fc00',\n          // fillColor: '#ffffff',\n          strokeWidth: 5,\n          strokeCap: 'round',\n          opacity: 0.42\n        })\n        while (worms[w].segments.length < wormLen) {\n          worms[w].add(new paper.Point(0, 0))\n        }\n      }\n\n      // Define a function to generate a random polynomial of degree 3\n      function genNewCurve (path) {\n        path.removeSegments()\n        let xScale = xAxis / 20\n        let yScale = yAxis / 2\n\n        // let ar = (Math.random() < 0.5 ? -1 : 1)\n        let br = (Math.random() < 0.5 ? -1 : 1)\n        let cr = (Math.random() < 0.5 ? -1 : 1)\n        let dr = (Math.random() < 0.5 ? -1 : 1)\n\n        // let a = Math.floor(Math.random() * 2) * ar\n        let b = Math.floor(Math.random() * 5) * br\n        let c = Math.floor(Math.random() * 10) * cr\n        let d = Math.floor(Math.random() * 10) * dr\n\n        function polynomial (x) {\n          return b * (x ** 3) + c * (x ** 2) + d * (x ** 1)\n        }\n\n        for (var i = -10; i <= 10; i++) {\n          var segment = xScale\n          var init = false\n\n          // console.log('x: ' + (i * segment) + ' y: ' + (polynomial(i) + yScale))\n          if (i === -10) {\n            path.moveTo(new paper.Point((i + 10) * segment, polynomial(i) + yScale))\n          }\n          if (!init && ((polynomial(i) > 0) || (polynomial(i) < yAxis))) {\n            segment = (xAxis / (20 - i))\n            init = true\n          }\n          path.add(new paper.Point((i + 10) * segment, polynomial(i) + yScale))\n        }\n        path.smooth()\n      }\n\n      // Define helper function getPointAtPercent to link Worm to Path\n      paper.Path.prototype.getPointAtPercent = function (percent) {\n        return this.getLocationAt(percent * this.length).getPoint()\n      }\n\n      // Setup animation params\n      let duration = 4000\n      let animationEndTime = [null, null, null]\n\n      // Trigger redraw\n      paper.view.onFrame = function onFrame (event) {\n        let now = Date.now()\n\n        for (let i = 0; i < paths.length; i++) {\n          if (now > animationEndTime[i]) {\n            animationEndTime[i] = now + duration + (Math.round((Math.random() * 3000)))\n            let hueChange = '+= ' + (Math.round((Math.random() * 500)))\n            worms[i].tween({\n              'strokeColor.hue': hueChange,\n              'strokeWidth': (Math.round((Math.random() * 5)) + 2)\n            }, duration)\n            genNewCurve(paths[i])\n          }\n          let percent = (duration - (animationEndTime[i] - now)) / duration\n\n          for (let s = 0; s < worms[i].segments.length; s++) {\n            let tailPosition = ((percent - (0.005 * s)) > 0) ? (percent - (0.005 * s)) : 0\n            worms[i].segments[s].point = paths[i].getPointAtPercent(tailPosition)\n            worms[i].smooth()\n          }\n        }\n        xAxis = window.innerWidth\n        yAxis = window.innerHeight\n      }\n      paper.view.draw()\n    }\n  },\n  mounted () {\n    this.draw()\n  }\n}\n</script>\n\n<style lang=\"scss\">\n  @import 'styles/normalize.css';\n  @import \"styles/skeleton.css\";\n\n  html, body, h2 {\n    font-family: Rift;\n    letter-spacing: 3px;\n    color: #000000;\n  }\n\n  #bg {\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    /*background-color: #0FA0CE;*/\n    top: 0;\n    left: 0;\n  }\n\n  #bg-canvas {\n    width: 100%;\n    height: 99%;\n  }\n\n  .trans {\n    -webkit-animation: trans 2s ease-in-out;\n    -o-animation: trans 2s ease-in-out;\n    -ms-animation: trans 2s ease-in-out;\n    -moz-animation: trans 2s ease-in-out;\n    animation: trans 2s ease-in-out;\n    animation-fill-mode: forwards;\n  }\n\n  @font-face {\n    font-family: 'Rift';\n    src: url('assets/font/RiftSoft-Regular.otf');\n    font-weight: normal;\n    font-style: normal;\n  }\n\n  @font-face {\n    font-family: 'RiftBold';\n    src: url('assets/font/RiftSoft-Bold.otf');\n    font-weight: bold;\n    font-style: normal;\n  }\n\n  @-webkit-keyframes trans {\n    0% {\n      background: #FFFFFF;\n      color: rgba(0, 0, 0, 1);\n    }\n    100% {\n      background: #000000;\n      color: rgba(0, 0, 0, 0);\n    }\n  }\n\n  @keyframes trans {\n    0% {\n      background: #FFFFFF;\n      color: rgba(0, 0, 0, 1);\n    }\n    100% {\n      background: #000000;\n      color: rgba(0, 0, 0, 0);\n    }\n  }\n\n</style>\n"],"sourceRoot":"src"}]}